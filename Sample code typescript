import AWS from 'aws-sdk';

AWS.config.update({ region: "us-east-1" });

const docClient = new AWS.DynamoDB.DocumentClient();

let unique: string[] = [];

export const handler = async (event: any, context: any): Promise<any> => {
  console.log("EventTime: ", JSON.stringify(event.time));

  const params = {
    TableName: process.env.POLICY_TABLE as string,
    ProjectionExpression: "policy_id",
    FilterExpression: '#CreatedTimeStamp BETWEEN :fromDateTime AND :toDateTime AND #ProcessedFlag=:flag',
    ExpressionAttributeNames: {
      'ProcessedFlag': 'event_status',
      'CreatedTimeStamp': 'occurred_at',
    },
    ExpressionAttributeValues: {
      ':flag': 'CONSUMED',
      ':fromDateTime': new Date(new Date(event.time).getTime() - (24 * 60 * 60 * 1000)).toISOString(),
      ':toDateTime': new Date(event.time).toISOString(),
    },
  };
  
  console.log("yesterday :", new Date(new Date(event.time).getTime() - (24 * 60 * 60 * 1000)).toISOString());

  await docClient.scan(params, onScan).promise();

  const response = {
    isBase64Encoded: false,
    statusCode: 200,
    headers: {},
    body: JSON.stringify(unique),
  };
  
  return response;
};

function onScan(err: any, data: any): void {
  if (err) {
    console.error("Unable to scan the table. Error JSON:", JSON.stringify(err, null, 2));
  } else {
    console.log("Scan succeeded.", JSON.stringify(data));
    data.Items.forEach(function(itemdata: any) {
      const txt = JSON.stringify(itemdata);
      const obj = JSON.parse(txt);
      unique = unique.filter((item, i, ar) => ar.indexOf(item) === i);
      unique.push(obj.policy_id);
    });
    if (typeof data.LastEvaluatedKey !== "undefined") {
      console.log("Scanning for more...");
      const params = {
        TableName: process.env.POLICY_TABLE as string,
        ProjectionExpression: "policy_id",
        FilterExpression: '#CreatedTimeStamp BETWEEN :fromDateTime AND :toDateTime AND #ProcessedFlag=:flag',
        ExpressionAttributeNames: {
          'ProcessedFlag': 'event_status',
          'CreatedTimeStamp': 'occurred_at',
        },
        ExpressionAttributeValues: {
          ':flag': 'CONSUMED',
          ':fromDateTime': new Date(new Date(event.time).getTime() - (24 * 60 * 60 * 1000)).toISOString(),
          ':toDateTime': new Date(event.time).toISOString(),
        },
        ExclusiveStartKey: data.LastEvaluatedKey,
      };
      docClient.scan(params, onScan);
    }
  }
}
